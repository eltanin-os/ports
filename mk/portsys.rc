#!/bin/rc
#
argv0=$0

if ([ -z $"PORTS ]) {
	echo $argv0: '<error>' missing PORTS environmental variable >[1=2]
	exit 1
}

. $PORTS/mk/config.rc
. $PORTS/mk/common.rc

fn sigexit {
	rm -Rf $bfile $ffile $tmpdir $tmpsysdir
}

OPKG=false
OTMPSYS=false
OCACHE=false
OONLYALL=false
CACHEDIR=''

if (~ $#* 0) portsys_io_error missing action

switch ($1) {
case package
	OPKG=true
case install
	true
case *
	portsys_io_error unknown action
}

shift

while (~ $1 -*) {
	switch($1) {
	case '-L'
		portsys_io_message using local environment
		OTMPSYS=true
	case '-a'
		portsys_io_message ignoring non-[all] packages
		OONLYALL=true
	case '-d'
		if ([ -z $"2 ]) portsys_io_error no cache directory given
		portsys_io_message using cache directory
		OCACHE=true
		CACHEDIR=$2
		shift
	case '-*'
		portsys_io_error unknown flag
	}
	shift
}

if (~ $#* 0) portsys_io_error no file given
if (! ~ $#* 1) portsys_io_error too much arguments
if (![ -f $"1 ]) portsys_io_error $1: no such file

. $PORTS/mk/gen.rc

bfile=`{gentmpfile}
ffile=`{gentmpfile}
vdir=`{mktemp -d} || portsys_io_error failed to obtain temporary directory
tmpdir=$vdir

if ($OTMPSYS) {
	tmpsysdir=`{mktemp -d} ||\
	    portsys_io_error failed to obtain temporary directory
	cat <<EOF >>$bfile
CFLAGS=($$CFLAGS -I$tmpsysdir$$INCDIR)
LDFLAGS=($$LDFLAGS -L$tmpsysdir$$LIBDIR)
EOF
}

PORTSYS_SYSPATH=$tmpsysdir
if ([ -z $"PORTSYS_SYSPATH ]) PORTSYS_SYSPATH=/

if ($OPKG) {
	if ([ -z $PORTSYS_PKGDESTDIR ]) PORTSYS_PKGDESTDIR=`{pwd}^/portsys_pkgs
	if ([ -z $PORTSYS_DBDESTDIR ]) PORTSYS_DBDESTDIR=$PORTSYS_PKGDESTDIR
	if (![ -d $PORTSYS_PKGDESTDIR ]) mkdir -p $PORTSYS_PKGDESTDIR
	if (![ -d $PORTSYS_DBDESTDIR ]) mkdir -p $PORTSYS_DBDESTDIR
	PKGVARS=`{cat <<EOF
PORTSYS_PKGDESTDIR=$PORTSYS_PKGDESTDIR
PORTSYS_DBDESTDIR=$PORTSYS_DBDESTDIR
EOF
	}
}

if (![ -n $"CACHEDIR ]) CACHEDIR=`{pwd}^/portsys_cache
if (![ -d $"CACHEDIR ]) mkdir -p $"CACHEDIR

L=`{gensection $"1 deps}
*=`{gensection $"1 all}

portsys_io_message generating script files
@{
	OREL=true
	if ($OONLYALL) OPKG=false
	for (p in $L) genpkg $"p
}
@{
	OREL=false
	for (p in $*) genpkg $"p
}

portsys_io_message starting fetch process
@{ cd $"tmpdir
$"ffile } || portsys_io_error fetch process failed
portsys_io_message starting build process
@{ cd $"tmpdir
$"bfile } || portsys_io_error build process failed

if ($OONLYALL) @{
	portsys_io_message cleaning non necessary database files
	cd $PORTSYS_DBDESTDIR
	rm -f $L
}
