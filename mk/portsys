#!/bin/rc -e
if (test -z $PORTS) {
	echo '<error>' $0: missing PORTS environmental variable >[1=2]
	exit 1
}
true # '-e' sucks
argv0=`{basename $0}
. $PORTS/mk/config
. $PORTS/mk/com/io.rc

repos=`{ls $PORTS/pkg}
if (~ $#repos 0) error no repositories found

if (~ $#* 0) {
	warning no arguments given
	warning aborting...
	exit 0
}

switch ($1) {
case package
	mk='pack'
case install
	mk='install'
case *
	error unknown action
}
shift

# path vars
EXTRAINC=()
EXTRALIB=()
CACHEDIR=''
PKGPATH=''
SYSPATH=''

# flags
bflag='false'
dflag='false'
kflag='false'
mflag='false'
sflag='false'
uflag='false'

while (~ $1 -*) {
	for (opt in `{printf '%s' $1 | fold -w1}) switch($opt) {
	case A
		bflag='true'
		dflag='true'
		mflag='true'
		sflag='true'
	case B
		bflag='true'
	case D
		dflag='true'
	case M
		mflag='true'
	case S
		sflag='true'
	case d
		if (test -z $2) error no cache directory given
		message using cache directory
		CACHEDIR=$2
		shift
	case e
		if (test -z $2) error no directory given
		message using a extra directory
		EXTRAINC=($EXTRAINC '-I'$2$"INCDIR)
		EXTRALIB=($EXTRALIB '-L'$2$"LIBDIR)
		shift
	case k
		message preserving dependencies
		kflag='true'
	case p
		if (test -z $2) error no directory given
		PKGPATH=$2
		shift
	case r
		if (test -z $2) error no directory given
		message alternative root directory set
		SYSPATH=$2
		shift
	case u
		uflag='true'
	case -
		;
	case *
		error $opt unknown flag
	}
	shift
}

if (!$bflag && !$dflag && !$mflag && !$sflag) {
	warning no flags given
	warning aborting...
	exit 0
}

# portsys vars set1
WRKDIR=`{mktemp -p $PORTS/mk/tmp -dt PORTSYS@XXXXXXXXX}
PORTSYS_DBDIR=$WRKDIR/dbfiles
PORTSYS_PKGDIR=$WRKDIR/pkgroot
PORTSYS_ROOTPWD=$WRKDIR/tmproot
PORTSYS_HOSTOS=`{uname -s | $AWK '{print(tolower($0))}'}
PORTSYS_HOSTARCH=`{uname -m}

# portsys vars set2
PWD=`{pwd}
if (test -z $PKGPATH) PKGPATH=$PWD/portsys_pkgs
{ ~ $mk 'pack' } && TDBDIR=$PKGPATH || TDBDIR=$SYSPATH$DBDIR
if (! test -d $TDBDIR) mkdir -p $TDBDIR
if (test -z $"CACHEDIR) CACHEDIR=$PWD/portsys_cache
if (! test -d $CACHEDIR) mkdir $CACHEDIR
mkdir -p $PORTSYS_DBDIR

# build flags
CPPFLAGS=$"CPPFLAGS' '$"EXTRAINC' -I'$"PORTSYS_ROOTPWD$"INCDIR' -I'$"SYSPATH$"INCDIR
LDFLAGS=$"LDFLAGS' '$"EXTRALIB' -L'$"PORTSYS_ROOTPWD$"LIBDIR' -L'$"SYSPATH$"LIBDIR

# tmp env fuctions
fn sigexit {
	rm -Rf $WRKDIR
}

fn dbman {
	a1=$1; a2=$2; a3=$3
	if (~ $a1 '-k') a1=()
	if (~ $a1 '-t') a2=$"a2'{'
	dir=`{$PORTS/mk/bin/dbman $a3}
	$PORTS/mk/bin/dbread $a1 $a2 $"dir/vars
}

fn getsrc {
	dir=`{dbman -k src $1}
	if (! ~ $dir '<nil>') {
		echo -n $dir
	}; if not {
		name=`{dbman -k name $1}
		version=`{dbman -k version $1}
		echo -n $name-$version
	}
}

# current deps as flags
if ($uflag || ! test -f $PORTS/pkg/cache.cdb) $PORTS/mk/bin/dbman -u
true
. $PORTS/mk/com/deps.rc
args=`{portsys_deps $*} || error failed to generate args list

# stage1: fetch, explode, patch
for (pkg in $args) {
	cd $WRKDIR
	message $pkg: fetching...
	cksum=`{dbman -k cksum $pkg}
	mirrors=`{dbman -t mirrors $pkg}
	version=`{dbman -k version $pkg}
	src=`{getsrc $pkg}
	tmp=`{mktemp -p $WRKDIR}
	$PORTS/mk/bin/fetch $tmp $mirrors
	message $pkg: exploding...
	$PORTS/mk/bin/explode $tmp
	message $pkg: patching...
	dir=`{$PORTS/mk/bin/dbman $pkg}
	patches=`{dbman -t patches $pkg}
	plvl=`{dbman -k patch-level $pkg}
	if (~ $plvl '<nil>') plvl=1
	@{ cd $src
	for (p in $patches) patch -p$plvl < $dir/patches/$p }
}

fn _createdb {
	@{ name=$1
	if (~ $#* 3) description=$"description' '$3
	$PORTS/mk/bin/createdb $2 }
}

# stage2: building, generate db files
for (pkg in $args) {
	dir=`{getsrc $pkg}
	cd $WRKDIR/$dir
	name=`{dbman -k name $pkg}
	message $pkg: building...
	@{ PORTSYS_TMP_BUILDDIR=`{mktemp -u 'PORTSYS@XXXXXXXXX'}
	PATH=$PATH:$PORTS/mk/utils
	dir=`{$PORTS/mk/bin/dbman $pkg}
	@{ DESTDIR=$WRKDIR/pkgroot/$name
	. $PORTS/mk/com/premeth.rc
	$dir/build
	cd $DESTDIR
	message $pkg: preparing...
	$PORTS/mk/bin/prepare
	# copy dev files in a single dir
	$PORTS/mk/bin/list
	@{ SYSPATH=$WRKDIR/tmproot
	$PORTS/mk/bin/install -c <INSTALL@DEF
	$PORTS/mk/bin/install -c <INSTALL@DYNLIB
	$PORTS/mk/bin/install -c <INSTALL@DEV } } }
	# db files
	cd $WRKDIR/pkgroot/$name
	message $pkg: creating database entry...
	version=`{dbman -k version $pkg}
	license=`{dbman -k license $pkg}
	description=`{dbman -k description $pkg}
	if ($bflag) {
		@{ mdeps=`{dbman -t mdeps $pkg}
		rdeps=`{dbman -t rdeps $pkg}
		_createdb $name INSTALL@DEF }
		if ($mflag) _createdb $name'-man' INSTALL@MAN '<MANPAGES>'
	}
	_createdb $name'-dev' INSTALL@DEV '<DEVELOPMENT>'
	if ($dflag && $mflag) _createdb $name'-devman' INSTALL@DEVMAN '<DEVELOPMENT MANPAGES>'
	_createdb $name'-dynlib' INSTALL@DYNLIB '<DYNAMIC LIBRARIES>'
}

fn _install {
	@{ name=$1
	if (test -e $PORTSYS_DBDIR/$name) {
		mv $PORTSYS_DBDIR/$name $TDBDIR
		$PORTS/mk/bin/$mk $2
	}
	true }
}

# stage3: install/pack
if (! $kflag) args=$*
for (pkg in $args) {
	name=`{dbman -k name $pkg}
	version=`{dbman -k version $pkg}
	cd $WRKDIR/pkgroot/$name
	message $pkg: installing...
	if ($bflag) {
		_install $name INSTALL@DEF
		if ($mflag) _install $name'-man' INSTALL@MAN
	}
	if ($dflag) {
		_install $name'-dev' INSTALL@DEV
		if ($mflag) _install $name'-devman' INSTALL@DEVMAN
	}
	if ($sflag) _install $name'-dynlib' INSTALL@DYNLIB
}
