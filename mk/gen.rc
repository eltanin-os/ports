#!/bin/rc
# Public

# $1: file
# $2: section
fn gensection {
	$SED -n '/\['$"2'\]/,/^\[.*\]$/p' $"1 |\
	    $SED '/^\[.*\]$/d'
}

# $* : void
fn gentmpfile {
	tmpfile=`{mktemp} || portsys_io_error failed to obtain temporary file
	chmod +x $tmpfile
	cat <<'EOF' >$tmpfile
#!/bin/rc -e
. $PORTS/mk/config.rc
. $PORTS/mk/common.rc
EOF
	echo $"tmpfile
}

# $1: package
fn genpkg @{
	p=$1
	pkg=`{basename $p}
	portsys_io_message $pkg: creating vars file
	@{ gensection $PORTS/pkg/$p vars | sed 's/=\(.*\)/=(\1)/g'
	patches=`{gensection $PORTS/pkg/$p patches}
	rdeps=`{gensection $PORTS/pkg/$p rdeps}
	mdeps=`{gensection $PORTS/pkg/$p mdeps}
	cat <<EOF
patches=($patches)
rdeps=($rdeps)
mdeps=($mdeps)
EOF
	} > $vdir/$pkg.vars
	portsys_io_message $pkg: merging fetch section
	@{ cat <<EOF
# FETCH
@{ . $tmpdir/$pkg.vars
EOF
	mirrors=`{gensection $PORTS/pkg/$p mirrors}
	urlname=`{basename $mirrors($#mirrors)}
	cat <<EOF
__f=($CACHEDIR/$urlname)
portsys_fetch $$__f $mirrors
. $tmpdir/$pkg.vars
portsys_cksum $$cksum $$__f
portsys_explode $$__f
if ([ -z $$"src ]) src=$$name-$$version
portsys_patch $$"src $$patches }
EOF
	} >> $ffile
	portsys_io_message $pkg: merging build and install sections
	@{ cat <<EOF
# BUILD
@{ . $tmpdir/$pkg.vars
PORTSYS_TMP_BUILDDIR=`{mktemp -u build.XXXXXXXXXX}
if ([ -z $$"src ]) src=$$name-$$version
cd $$"src
PORTSYS_ROOTPWD=`{pwd}
EOF
	gensection $PORTS/pkg/$p build
	cat <<EOF
# INSTALL
@{
$PKGVARS
DESTDIR=$$PORTSYS_ROOTPWD/.pkgroot
EOF
	gensection $PORTS/pkg/$p install
	cat <<'EOF'
@{
cd $"DESTDIR
portsys_blacklist
find $"BINDIR -type f -exec $"STRIP '{}' +
} >[2] /dev/null || true
if ([ -z $PORTSYS_DBDESTDIR ]) PORTSYS_DBDESTDIR=$DBDIR
dbdir=$"PORTSYS_DBDESTDIR
dbfile=$"PORTSYS_DBDESTDIR/$"name
mkdir -p $"dbdir
@{
	cd $PORTSYS_ROOTPWD
	portsys_gendb $"dbdir >[1] $"dbfile
EOF
	cat <<EOF
	if ($OPKG) portsys_pack $$"PORTSYS_PKGDESTDIR
	if ($OREL) portsys_reflectfs $$"PORTSYS_SYSPATH
}}}
EOF
	} >> $bfile
}
